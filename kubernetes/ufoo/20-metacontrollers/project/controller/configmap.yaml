---

apiVersion: v1
kind: ConfigMap
metadata:
  name: controller
  namespace: meta-project
data:
  sync.py: |
    from http.server import BaseHTTPRequestHandler, HTTPServer
    import json

    class Controller(BaseHTTPRequestHandler):
      def sync(self, parent, children):
        # Compute status based on observed state.
        desired_status = {
          "namespaces": len(children["Namespace.v1"])
        }

        # Generate the desired child object(s).
        description = parent.get("spec", {}).get("description", "")
        license = parent.get("spec", {}).get("license", "WTFPL")

        desired_namespaces = [
          {
            "apiVersion": "v1",
            "kind": "Namespace",
            "metadata": {
              "name": parent["metadata"]["name"],
              "labels": {
                "license": parent["spec"]["license"],
              },
              "annotations": {
                "description": parent["spec"]["description"],
              }
            }
          }
        ]

        return {"status": desired_status, "children": desired_namespaces}

      def do_POST(self):
        # Serve the sync() function as a JSON webhook.
        observed = json.loads(self.rfile.read(int(self.headers.get("content-length"))))
        desired = self.sync(observed["parent"], observed["children"])

        self.send_response(200)
        self.send_header("Content-type", "application/json")
        self.end_headers()
        self.wfile.write(json.dumps(desired).encode())

    HTTPServer(("", 80), Controller).serve_forever()
