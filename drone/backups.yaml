{{ range .input }}

---

kind: pipeline
type: kubernetes
name: backup-{{ .name }}

concurrency:
  limit: 1

metadata:
  namespace: {{ .namespace }}

clone:
  disable: true

volumes:
  - name: rclone-config
    temp: {}
  - name: data
    temp: {}
  {{ range .files }}
  - name: files-{{ .name }}
    claim:
      name: {{ .claim }}
      read_only: true
  {{ end }}

steps:
  {{ range .postgres }}
  - name: {{ .name }}-dump
    image: postgres:15.1
    depends_on: []
    volumes:
      - name: data
        path: /data
    environment:
      DB_HOSTNAME:
        from_secret: {{ .name }}_postgres_hostname
      DB_USERNAME:
        from_secret: {{ .name }}_postgres_username
      DB_PASSWORD:
        from_secret: {{ .name }}_postgres_password
      DB_DATABASE:
        from_secret: {{ .name }}_postgres_database
    commands:
      - >
        pg_dump --verbose \
          postgresql://$${DB_USERNAME}:$${DB_PASSWORD}@$${DB_HOSTNAME}:5432/$${DB_DATABASE} \
          > /data/{{ .name }}.sql

  {{ end }}

  {{ range .mysql }}
  - name: {{ .name }}-dump
    image: bitnami/mariadb:10.6.11-debian-11-r22
    depends_on: []
    volumes:
      - name: data
        path: /data
    environment:
      DB_HOSTNAME:
        from_secret: {{ .name }}_mysql_hostname
      DB_USERNAME:
        from_secret: {{ .name }}_mysql_username
      DB_PASSWORD:
        from_secret: {{ .name }}_mysql_password
      DB_DATABASE:
        from_secret: {{ .name }}_mysql_database
    commands:
      - >
        mysqldump --verbose \
          -h $${DB_HOSTNAME} -u $${DB_USERNAME} -p$${DB_PASSWORD} $${DB_DATABASE} \
          > /data/{{ .name }}.sql

  {{ end }}

  {{ range .files }}
  - name: {{ .name }}-copy
    image: agrrh/cider:0.4.0
    depends_on: []
    volumes:
      - name: data
        path: /data
      - name: files-{{ .name }}
        path: /source
    commands:
      - mkdir -p /data/files-{{ .name }}
      - cp -r -p -v /source/{{ .subpath }} /data/files-{{ .name }}/

  {{ end }}

  # TODO: notify size somewhere to perform sanity check?
  - name: audit
    image: alpine:3.17
    volumes:
      - name: data
        path: /data
    commands:
      - cd /data
      - ls -lh ./

  - name: rclone-init
    image: alpine:3.17
    environment:
      RCLONE_CONFIG_BODY:
        from_secret: rclone_yandex_config
    volumes:
      - name: rclone-config
        path: /tmp/rclone
    commands:
      - echo $${RCLONE_CONFIG_BODY} | base64 -d > /tmp/rclone/rclone.conf

  - name: upload-data
    image: agrrh/cider:0.4.0
    environment:
      RESTIC_REPOSITORY: "rclone:yandex:/backups"
      RESTIC_PASSWORD:
        from_secret: restic_password
    volumes:
      - name: rclone-config
        path: /root/.config/rclone
      - name: data
        path: /data
    commands:
      - rclone size yandex:/

      - cd /data
      - >
        restic \
          backup \
          --host drone \
          --tag {{ .name }} \
          ./

      - >
        restic \
          forget \
          --host drone \
          --tag {{ .name }} \
          --keep-daily 7 \
          --keep-weekly 4 \
          --keep-monthly 12 \
          --keep-yearly 10 \
          --prune

      - >
        restic \
          snapshots \
          --host drone

trigger:
  event:
    - cron
    - custom
  ref:
    - refs/heads/master

{{ end }}
